E7 :: Files and Directories

# Navigation
Files and directories are an important part of any programming language, as they provide a way to easily persist data.

In this section, we are going to learn how to navigate through files and folders in our program and create/read them.

First, when working with files, it's important to have a good grasp on the path of an specific file or folder. For that, we can use the `path.abspath()` function from the `os` module. This function returns the absolute path from a relative path, allowing us to easily navigate through our filesystem.

Then, for eample, if we want to know where our current file is located, we can use the `path.dirname()` function with `__file__` as argument. With this we will have the absolute path where the current script is located.

As the script itself normally is not what we are looking for, we can also get the folder of that file using `path.dirname()` function. This function will returns us the path of the parent directory for a given path.

We may also want to know if a given path is a directory or a file. For this, we can use the `path.isfile()` and `path.isdir()` functions that will return `True` or `False`, respectively, depending on whether if the given path is a file or a folder.


While we may be working related to files relative to the current script, we may also work related to the current execution path (the path on the terminal where our program is running). For that, we can use the `getcwd()` function from the `os` module. This function returns the current working directory.
Or, if we want to know the path for our main script, for that we can get the path from `sys.argv[0]` in conjuction with `path.dirname()`, as this will give us the path of our root folder, no matter where we are.


Now, as we are working with our examples, lets define our folder variable as the path where this file is located:

    folder = path.dirname(path.abspath(__file__))

Then, we are going to list all the files in that directory and print all the example instructions in order. We can use `listdir()` from the `os` module to get a list of strings with all the files and folders inside our folder. As the order of elements returned by this function is not guaranteed, we are going to sort them using `sorted()`. Then, we will check if each file starts with an "e" (to filter out non-example files) and does not end in ".py", to sort out the script files. If it's a valid example file, we print its full path.


In this case, we have all the files from our examples in the same folder, but the same could have been divided between different subdirectories.
 In that case, we could use the function `walk` from the `os` module to list all files and directories inside a folder. The function `walk` returns a tuple with the root directory name, all subdirectories and all files inside that folder. The topdown parameter determines if results will be returned from the root directory or from the branches first. In this case, we are using the topdown parameter as True to list all files and directories from the root directory.



# Files
Now that we know how to navigate through our file system, let's create a new file in the folder and write some text inside it.
Let's create the file "txt_e7.txt" inside our examples folder.
For that, first we are to define the file_path variable with the path to the file. To get the file path, we will use the function `path.join`. The function `join` takes two arguments: the folder and the name of the file and returns a valid path for our current operating system.
    file_path = path.join(folder,"txt_e7.txt")

Now, let's create our file. For that we are going to use the open function. This function open takes two arguments: the file path and the mode. The main modes are:
  - r - read only
  - w - write only (it creates the file if it doesn't exist and replaces its content if it does exist)
  - a - append (it creates the file if it doesn't exist and adds content at the end of the file)
We can also specify if we are working with text (t) or binary (b) files within the mode parameter. For text modes, we can also provide the encoding parameter, which specifies the encoding of the file.

In our case, first let's open the file in write only mode and then write some text inside it, and to be sure, let's set the encoding as utf-8.
    f = open(file_path,"w",encoding="utf-8")

Now, we can use the function write from the file object. This function write takes one argument: the text that we want to write inside our file and add it to it.
    file.write("Hello World!\n")
NOTE: In case of binary files, instead of text, we would use a byte array or any other data conversion function to binary.

We can also write multiple lines at once using the function writelines from the file object. This function writelines takes one argument: an iterable that contains all the lines that we want to write inside our file.
    f.writelines(["line1", "line2"])

* It's important take into account that write and writelines do not add a line break at the end of the text (only between each line in writelines), so we need to manage that manually if required.

Finally, we need to close our file. This is done using the function close from the file object.
    f.close()

Now, we can read our file. For that, we will use the function open again and this time with the mode parameter set as r (read only).
But, instead of opening and closing the file manually, we can use a context manager to automatically handle the opening and closing of the file.
This is done using the "with" statement in conjunction to the open function:
    with open(file_path,"r",encoding="utf-8") as f:
        # do something with f
When doing this, the file will be closed automatically after we exit the context, either from a successful execution or an exception.

With our file open for reading, we can now read its content. We can use the function read to get all it's content into a variable:
    tet = f.read()

We can also loop through each line of the file one by one (specially useful when working with large text files):
    for line in f:
        # do something with line
